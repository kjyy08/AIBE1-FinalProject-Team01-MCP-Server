on:
  workflow_call:
    inputs:
      registry:
        description: 'Container registry URL'
        required: true
        type: string
      image_name:
        description: 'Docker image name'
        required: true
        type: string
    outputs:
      image-tag:
        description: "Built Docker image tag"
        value: ${{ jobs.build.outputs.image-tag }}
      status:
        description: "빌드 실행 결과"
        value: ${{ jobs.build.outputs.status }}

jobs:
  build:
    name: Docker 이미지 빌드
    runs-on: ubuntu-latest

    outputs:
      image-tag: ${{ steps.meta.outputs.version }}
      status: ${{ steps.build-result.outputs.status }}

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 세팅
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle 캐시 세팅
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: jOOQ 캐시 세팅
        uses: actions/cache@v4
        with:
          path: |
            src/generated/
            .gradle/jooq-docker/
          key: jooq-${{ hashFiles('src/main/resources/db/migration/*.sql', 'build.gradle') }}
          restore-keys: |
            jooq-
          fail-on-cache-miss: true

      - name: Docker 서비스 시작
        run: |
          sudo systemctl start docker
          docker --version

      - name: Gradle 실행 권한 부여
        run: chmod +x gradlew

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: GHCR 로그인
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker 메타데이터 추출
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.registry }}/${{ inputs.image_name }}
          tags: |
            type=raw,value=develop,enable=${{ github.ref_name == 'develop' }}
            type=raw,value=main,enable=${{ github.ref_name == 'main' }}
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}

      - name: Docker 이미지 빌드 & 푸시
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 빌드 결과 설정
        if: always()
        id: build-result
        run: |
          if [ "${{ steps.build.outcome }}" = "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi